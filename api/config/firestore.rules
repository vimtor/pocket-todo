rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{user} {
      allow read, write: if isAuth(user);

      match /tasks/{task} {
        allow read: if isAuth(user);
        allow create: if isAuth(user) && isValidTask(request.resource.data);
        allow update: if isAuth(user) && isValidTaskUpdate(request.resource.data);
        allow delete: if isAuth(user);
      }
    }

    match /jobs/{job} {
      allow read, write: if false;
    }

    function isLogged() {
      return request.auth != null;
    }

    function isOwner(id) {
      return request.auth.uid == id;
    }

    function isAuth(id) {
      return isLogged() && isOwner(id);
    }

    function isValidTask(data) {
      return (data.title is string && data.title.size() < 256 && data.title.size() > 0)
        && (!isPresent("description", data) || (data.description is string && data.description.size() < 512))
        && (data.status is string && data.status in ['schedule', 'today', 'archived'])
    }

    function isValidJob(data) {
      return (data.name != null && data.name in ['reschedule'])
        && (data.user != null && data.user is string)
        && (data.date != null && data.date is timestamp);
    }

    function isValidJobUpdate(data) {
      return (data.name == null || data.name in ['reschedule'])
        && (data.user == null || data.user is string)
        && (data.date == null || data.date is timestamp);
    }

    function isValidTaskUpdate(data) {
      return (!isPresent("title", data) || (data.title is string && data.title.size() < 256 && data.title.size() > 0))
        && (!isPresent("description", data) || (data.description is string && data.description.size() < 512))
        && (!isPresent("status", data) || (data.status is string && data.status in ['schedule', 'today', 'archived']))
    }

    function isPresent(field, data) {
    	return field in data;
    }
  }
}
